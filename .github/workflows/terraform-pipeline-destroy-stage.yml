name: "Terraform Destroy Action - Stage"

on:
  workflow_dispatch:
    branches: stage

permissions:
      id-token: write 
      contents: read 
      pull-requests: write

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION_STAGE }}

jobs:
  deploy:
    strategy:
      max-parallel: 1
      matrix:
        environment: [Stage]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Git Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials From AWS Account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_STAGE }}
          aws-region: ${{ secrets.AWS_REGION_STAGE }}
          role-session-name: GitHub-OIDC-TERRAFORM-STAGE

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.9
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: false

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME_STAGE }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME_STAGE }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Destroy
        id: destroy
        if: github.ref == 'refs/heads/stage'
        run: terraform destroy -var-file="./Stage/variables.tfvars" -auto-approve -input=false

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.ref == 'refs/heads/stage'
        env:
          OUTPUT: "terraform\n${{ steps.destroy.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Destroy üìñ\`${{ steps.destroy.outcome }}\`

            <details><summary>Destroy Output</summary>

            \`\`\`\n
            ${process.env.OUTPUT}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.destroy.outcome == 'failure'
        run: exit 1
